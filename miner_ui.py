#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import signal
import subprocess
from threading import Thread, Lock
from datetime import datetime, timedelta
import re
import json

class VRSCMinerController:
    def __init__(self):
        self.miner_process = None
        self.running = False
        self.restart_count = 0
        self.max_restarts = 5
        self.last_activity = time.time()
        self.lock = Lock()
        self.stats = {
            'shares': {'accepted': 0, 'rejected': 0},
            'hashrate': {'current': 0, 'average': 0, 'max': 0},
            'uptime': 0,
            'start_time': datetime.now()
        }
        self.hash_history = []
        self.check_config()

    def check_config(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞ dependencies"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        required_files = ['start.sh', 'ccminer', 'config.json']
        for f in required_files:
            if not os.path.exists(f):
                print(f"\033[1;31m‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {f}\033[0m")
                sys.exit(1)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö library
        lib_path = f"{os.environ['PREFIX']}/lib"
        required_libs = ['libjansson.so', 'libssl.so', 'libcrypto.so']
        for lib in required_libs:
            if not os.path.exists(f"{lib_path}/{lib}"):
                print(f"\033[1;31m‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö library: {lib}\033[0m")
                print(f"‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: pkg install {lib.split('.')[0][3:]}")
                sys.exit(1)

        # ‡∏≠‡πà‡∏≤‡∏ô config
        try:
            with open('config.json') as f:
                self.config = json.load(f)
        except Exception as e:
            print(f"\033[1;31m‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î config.json: {e}\033[0m")
            sys.exit(1)

    def setup_environment(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
        os.environ['LD_LIBRARY_PATH'] = f"{os.environ.get('LD_LIBRARY_PATH', '')}:{os.environ['PREFIX']}/lib"
        os.chmod('start.sh', 0o755)
        os.chmod('ccminer', 0o755)

    def start_miner(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î"""
        with self.lock:
            if self.running:
                return True

            try:
                self.setup_environment()
                
                print("\033[1;36müöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î...\033[0m")
                self.miner_process = subprocess.Popen(
                    ['./start.sh'],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    universal_newlines=True,
                    bufsize=1,
                    preexec_fn=os.setsid,
                    shell=True,
                    env=os.environ
                )

                self.running = True
                self.last_activity = time.time()
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á threads ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitoring
                Thread(target=self.monitor_stdout, daemon=True).start()
                Thread(target=self.monitor_stderr, daemon=True).start()
                Thread(target=self.health_check, daemon=True).start()
                
                return True

            except Exception as e:
                print(f"\033[1;31m‚ùå ‡πÄ‡∏£‡∏¥‡πà‡∏° miner ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}\033[0m")
                return False

    def monitor_stdout(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stdout ‡∏à‡∏≤‡∏Å miner"""
        while self.running and self.miner_process.poll() is None:
            line = self.miner_process.stdout.readline()
            if line:
                self.process_output(line.strip())

    def monitor_stderr(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stderr ‡∏à‡∏≤‡∏Å miner"""
        while self.running and self.miner_process.poll() is None:
            line = self.miner_process.stderr.readline()
            if line:
                print(f"\033[1;31m[ERROR] {line.strip()}\033[0m")

    def process_output(self, line):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• output ‡∏à‡∏≤‡∏Å miner"""
        now = datetime.now().strftime("%H:%M:%S")
        print(f"\033[1;37m[{now}] {line}\033[0m")
        self.last_activity = time.time()

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.update_stats(line)

    def update_stats(self, line):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å output"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö accepted shares
        if 'accepted' in line.lower():
            if 'rejected' in line.lower():
                self.stats['shares']['rejected'] += 1
            else:
                self.stats['shares']['accepted'] += 1

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hashrate
        hashrate_match = re.search(r'(\d+\.?\d*)\s?(kH/s|H/s)', line)
        if hashrate_match:
            rate = float(hashrate_match.group(1))
            if hashrate_match.group(2) == 'kH/s':
                rate *= 1000
            
            self.stats['hashrate']['current'] = rate
            self.hash_history.append(rate)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            if self.hash_history:
                self.stats['hashrate']['average'] = sum(self.hash_history) / len(self.hash_history)
                self.stats['hashrate']['max'] = max(self.hash_history)

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.stats['uptime'] = str(datetime.now() - self.stats['start_time']).split('.')[0]

    def health_check(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û miner"""
        while self.running:
            time.sleep(15)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ miner ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if self.miner_process.poll() is not None:
                print("\033[1;33m‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ç‡∏∏‡∏î‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\033[0m")
                self.running = False
                self.restart_miner()
                break
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if time.time() - self.last_activity > 60:
                print("\033[1;33m‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏∏‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ\033[0m")
                self.restart_miner()
                break

    def restart_miner(self):
        """‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó miner"""
        with self.lock:
            if self.restart_count >= self.max_restarts:
                print("\033[1;31m‚ùå ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î...\033[0m")
                self.stop_miner()
                return False

            self.restart_count += 1
            print(f"\033[1;36m‚ôªÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó... (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {self.restart_count}/{self.max_restarts})\033[0m")
            
            self.stop_miner()
            time.sleep(3)
            return self.start_miner()

    def stop_miner(self):
        """‡∏´‡∏¢‡∏∏‡∏î miner"""
        with self.lock:
            if not self.running:
                return

            print("\033[1;36müõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î...\033[0m")
            self.running = False

            try:
                if self.miner_process:
                    os.killpg(os.getpgid(self.miner_process.pid), signal.SIGTERM)
                    self.miner_process.wait(timeout=10)
            except Exception as e:
                print(f"\033[1;33m‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£: {e}\033[0m")
                try:
                    os.killpg(os.getpgid(self.miner_process.pid), signal.SIGKILL)
                except:
                    pass
            finally:
                self.miner_process = None

    def display_stats(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        while self.running:
            time.sleep(5)
            self.clear_screen()
            
            print("\033[1;36m" + "‚ïê" * 50)
            print("üìä VRSC MINER STATISTICS")
            print("‚ïê" * 50 + "\033[0m")
            
            print(f"\033[1;33m‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {self.stats['uptime']}")
            print(f"‚úÖ ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß: {self.stats['shares']['accepted']} | ‚ùå ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: {self.stats['shares']['rejected']}")
            print(f"‚ö° ‡πÅ‡∏Æ‡∏ä‡πÄ‡∏£‡∏ó: {self.stats['hashrate']['current']/1000:.2f} kH/s (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {self.stats['hashrate']['average']/1000:.2f} kH/s)")
            print(f"üìà ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {self.stats['hashrate']['max']/1000:.2f} kH/s | ‚ôªÔ∏è ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó: {self.restart_count}/{self.max_restarts}")
            print("\033[1;36m" + "‚ïê" * 50 + "\033[0m")
            print("\033[1;32m‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô... ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î\033[0m")

    def clear_screen(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"""
        os.system('clear' if os.name == 'posix' else 'cls')

def main():
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    controller = VRSCMinerController()
    signal.signal(signal.SIGINT, lambda s, f: controller.stop_miner())

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    if controller.start_miner():
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            Thread(target=controller.display_stats, daemon=True).start()
            
            # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î
            while controller.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\n\033[1;33müõë ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ\033[0m")
        finally:
            controller.stop_miner()
    else:
        print("\033[1;31m‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡πÑ‡∏î‡πâ\033[0m")

    print("\033[1;36m‚úÖ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\033[0m")

if __name__ == "__main__":
    main()
